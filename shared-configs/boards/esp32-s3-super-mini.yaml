####################################
# Start Substitutions
####################################

substitutions:
  # UART pins - ESP32-S3 Super Mini UART pins
  # Using available GPIO pins from the physical pinout
  # GPIO43/GPIO44 are the hardware UART0 pins but may conflict with USB programming
  tx_pin_uart: GPIO43  # Hardware UART0 TX (may conflict with USB Serial/JTAG)
  rx_pin_uart: GPIO44  # Hardware UART0 RX (may conflict with USB Serial/JTAG)
  # Alternative safe software UART pins available on physical pinout:
  # tx_pin_uart: GPIO17  # Safe alternative TX pin
  # rx_pin_uart: GPIO18  # Safe alternative RX pin

  # LED/Light GPIO - ESP32-S3 Super Mini LED configuration
  # WARNING: GPIO48 controls BOTH red LED AND WS2812 RGB LED simultaneously
  # They cannot be used independently due to hardware design
  light_gpio: GPIO48   # Controls both red power LED and WS2812 RGB LED
  
  # ADC pin - ESP32-S3 Super Mini ADC pins (safe ADC1 channels)
  # Using ADC1 channels which work reliably with WiFi enabled
  mic_adc: GPIO1       # ADC1_CH0 - safe for analog input with WiFi
  
  # Motion sensor GPIO - Using available safe GPIO pins
  # Selected from pins confirmed safe by espboards.dev documentation
  motion_gpio: GPIO4   # Safe GPIO pin (confirmed safe by documentation)
  
  # I2C pins - ESP32-S3 Super Mini I2C pins (safe pins from documentation)
  sda_pin_i2c: GPIO6   # Safe I2C SDA pin (confirmed by documentation)
  scl_pin_i2c: GPIO7   # Safe I2C SCL pin (confirmed by documentation)
  
  # CONFIRMED AVAILABLE GPIO pins (from physical pinout diagram):
  # Left side: GPIO1, GPIO2, GPIO3, GPIO4, GPIO5, GPIO6, GPIO7, GPIO8, GPIO9, GPIO10, 
  #           GPIO11, GPIO12, GPIO13, GPIO14, GPIO15, GPIO16, GPIO17, GPIO18, GPIO21
  # Right side: GPIO33, GPIO34, GPIO35, GPIO36, GPIO37, GPIO38, GPIO39, GPIO40, GPIO41, 
  #            GPIO42, GPIO43, GPIO44, GPIO45, GPIO46, GPIO47, GPIO48
  
  # SAFE GPIO pins (confirmed both available AND safe per espboards.dev):
  # GPIO1, GPIO2, GPIO4, GPIO5, GPIO6, GPIO7, GPIO8, GPIO15, GPIO16, GPIO17, GPIO18, GPIO21
  # Note: GPIO20 is NOT available on the physical pinout
  
  # ADC-capable input pins (safe with WiFi, available on pinout):
  # ADC1: GPIO1-GPIO10 (recommended - work with WiFi enabled)
  # ADC2: GPIO11-GPIO20 (avoid when using WiFi, plus many not on pinout)
  
  # CRITICAL: Pins to AVOID (per official documentation):
  # GPIO3 - JTAG strapping pin, affects debug interface
  # GPIO9-GPIO14, GPIO33-GPIO38 - Connected to flash memory (SPI flash/PSRAM)
  # GPIO39-GPIO41 - JTAG debugging pins (MTCK, MTDO, MTDI)
  # GPIO42, GPIO43, GPIO44 - May conflict with USB Serial/JTAG
  # GPIO45, GPIO46 - Strapping pins (flash voltage, boot mode)
  # GPIO47, GPIO48 - Special: GPIO48 controls BOTH red LED and WS2812 simultaneously
  
  # Alternative pin configurations (using pins AVAILABLE on physical pinout):
  # Alternative UART pins (confirmed safe AND available):
  # tx_pin_uart: GPIO17  # Alternative safe UART TX (available on pinout)
  # rx_pin_uart: GPIO18  # Alternative safe UART RX (available on pinout)
  
  # Alternative I2C pins (safe pins available on pinout):
  # sda_pin_i2c: GPIO2   # Alternative safe I2C SDA (available)
  # scl_pin_i2c: GPIO5   # Alternative safe I2C SCL (available)
  
  # Alternative motion sensor pins (safe options available on pinout):
  # motion_gpio: GPIO8   # Alternative safe motion sensor pin (available)
  # motion_gpio: GPIO15  # Alternative safe motion sensor pin (available)
  # motion_gpio: GPIO16  # Alternative safe motion sensor pin (available)
  
  # Alternative ADC pins (ADC1 channels - safe with WiFi and available):
  # mic_adc: GPIO2       # ADC1_CH1 - safe analog input (available)
  # mic_adc: GPIO4       # ADC1_CH3 - safe analog input (available)
  # mic_adc: GPIO5       # ADC1_CH4 - safe analog input (available)
  
  # SPI pins configuration (using safe pins available on pinout):
  # mosi_pin: GPIO6   # Safe pin for SPI MOSI (available)
  # miso_pin: GPIO5   # Safe pin for SPI MISO (available)
  # sck_pin: GPIO4    # Safe pin for SPI SCK (available)
  # cs_pin: GPIO7     # Safe pin for SPI CS (available)
  
  # WARNING: Traditional SPI pins (GPIO11-GPIO14) are connected to flash memory
  # and should NOT be used for external SPI devices on ESP32-S3 Super Mini

####################################
# End Substitutions
####################################

esphome:
  platformio_options:
    build_flags: -DBOARD_HAS_PSRAM  # Enable PSRAM support
    board_build.flash_mode: qio
    board_build.f_flash: 80000000L
  on_boot:
    priority: 600
    then:
      - delay: 500ms  # Boot delay for sensor stabilization

esp32:
  # ESP32-S3 Super Mini board configuration
  # Using esp32-s3-devkitc-1 profile for maximum compatibility
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 4MB  # Common size - verify your board variant (some have 8MB/16MB)
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      # Performance optimizations
      CONFIG_COMPILER_OPTIMIZATION_PERF: y
      CONFIG_COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y  # Match flash_size above - change both if different
      
      # PSRAM configuration - most ESP32-S3 Super Mini boards include PSRAM
      CONFIG_SPIRAM: y                    # Enable PSRAM support
      CONFIG_SPIRAM_MODE_OCT: y          # Octal SPI mode for better performance
      CONFIG_SPIRAM_SPEED_80M: y         # 80MHz PSRAM speed
      CONFIG_SPIRAM_TYPE_AUTO: y         # Auto-detect PSRAM type
      
      # BLE support
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
      
      # Extend the watchdog timeout
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"
      
      # Native USB CDC configuration - ESP32-S3 Super Mini supports USB CDC
      CONFIG_ESP_CONSOLE_USB_CDC: y                    # Enable USB CDC console
      CONFIG_ESP_CONSOLE_USB_CDC_SUPPORT_ETS_PRINTF: y # Early boot messages via USB
      
      # WiFi compatibility and stability options
      CONFIG_ESP32_WIFI_ENABLE_WPA3_SAE: n        # Disable WPA3 SAE for compatibility
      CONFIG_ESP32_WIFI_ENABLE_WPA3_OWE_STA: n    # Disable WPA3 OWE for compatibility
      CONFIG_ESP32_WIFI_SOFTAP_SAE_SUPPORT: n     # Disable SAE in AP mode
      
      # Disable WiFi power management features that can cause connection issues
      CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED: n       # Disable TX aggregation
      CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED: n       # Disable RX aggregation

# PSRAM configuration - ESP32-S3 Super Mini PSRAM settings
# Most ESP32-S3 Super Mini variants include 2MB or 8MB PSRAM
psram:
  mode: octal     # Octal SPI mode for optimal performance
  speed: 80MHz    # Standard speed for stability

# UART bus configuration - for external device communication
# Note: This conflicts with USB serial debugging if using GPIO43/44
uart:
  id: uart_bus
  tx_pin: ${tx_pin_uart}  # See substitutions for pin assignments
  rx_pin: ${rx_pin_uart}  # See substitutions for pin assignments
  baud_rate: 256000       # High-speed UART communication
  parity: NONE
  stop_bits: 1
  data_bits: 8            # Standard 8-bit data

# I2C configuration (optional - add if using I2C sensors)
# i2c:
#   sda: ${sda_pin_i2c}
#   scl: ${scl_pin_i2c}
#   scan: true
#   frequency: 400kHz

# ADC sensor example (if using analog sensor)
# sensor:
#   - platform: adc
#     pin: ${mic_adc}
#     name: "Analog Input"
#     update_interval: 60s
#     attenuation: auto

# GPIO binary sensor example (motion sensor)
# binary_sensor:
#   - platform: gpio
#     pin: 
#       number: ${motion_gpio}
#       mode:
#         input: true
#         pullup: true
#     name: "Motion Sensor"
#     device_class: motion

# Light configuration - ESP32-S3 Super Mini typically has WS2812 RGB LED
# Option 1: For boards with WS2812 RGB LED (most common)
# light:
#   - platform: esp32_rmt_led_strip
#     rgb_order: GRB
#     pin: ${light_gpio}
#     num_leds: 1
#     chipset: ws2812
#     # rmt_channel parameter removed for ESP-IDF v5.x compatibility (auto-allocated)
#     id: status_light
#     name: "Status Light"
#     internal: true
#     restore_mode: ALWAYS_OFF
#     effects:
#       - addressable_rainbow:
#       - addressable_color_wipe:
#       - addressable_scan:
#       - addressable_flicker:

# Option 1.1: For boards with WS2812 RGB LED (most common) - make the light configurable in Home Assistant
# WS2812 RGB LED configuration - ESP32-S3 Super Mini onboard RGB LED
light:
  - platform: esp32_rmt_led_strip  # Preferred platform for ESP-IDF v5.x
    rgb_order: GRB                 # WS2812 color order (Green-Red-Blue)
    pin: ${light_gpio}             # GPIO48 on most ESP32-S3 Super Mini boards
    num_leds: 1                    # Single onboard RGB LED
    chipset: ws2812                # WS2812B LED chipset
    id: status_light
    name: "Status Light"
    restore_mode: ALWAYS_OFF       # Start with LED off after reboot
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: "Color Wipe"
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
      - addressable_scan:
          name: "Scanner"
          move_interval: 100ms
          scan_width: 1
      - addressable_flicker:
          name: "Flicker"
          intensity: 1.5%
      - pulse:
          name: "Pulse"
          transition_length: 1s
          update_interval: 1s
      - strobe:
          name: "Strobe"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 500ms
            - state: false
              duration: 250ms
      - random:
          name: "Random"
          transition_length: 5s
          update_interval: 7s

# Option 2: For boards with simple LED (uncomment if your board has simple LED)
# light:
#   - platform: binary
#     name: "Blue Status Light"
#     output: light_output
#     id: status_light
#     #restore_mode: ALWAYS_ON
#     restore_mode: RESTORE_DEFAULT_ON
#     #restore_mode: ALWAYS_OFF
 
# output:
#   - platform: gpio
#     pin: ${light_gpio}
#     id: light_output

# Add select entity for easy effect switching
select:
  - platform: template
    name: "LED Effect"
    id: led_effect_select
    options:
      - "None"
      - "Rainbow"
      - "Color Wipe"
      - "Scanner"
      - "Flicker"
      - "Pulse"
      - "Strobe"
      - "Random"
    initial_option: "None"
    set_action:
      - if:
          condition:
            lambda: 'return x == "None";'
          then:
            - light.turn_on:
                id: status_light
                effect: "None"
      - if:
          condition:
            lambda: 'return x == "Rainbow";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Rainbow"
      - if:
          condition:
            lambda: 'return x == "Color Wipe";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Color Wipe"
      - if:
          condition:
            lambda: 'return x == "Scanner";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Scanner"
      - if:
          condition:
            lambda: 'return x == "Pulse";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Pulse"
      - if:
          condition:
            lambda: 'return x == "Strobe";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Strobe"
      - if:
          condition:
            lambda: 'return x == "Random";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Random"


