####################################
# Start Substitutions
####################################

substitutions:
  # UART pins - ESP32-S3 Super Mini UART pins
  # WARNING: GPIO43/44 are default USB serial pins - using them conflicts with programming
  # Alternative safe UART pins recommended for production use
  tx_pin_uart: GPIO17  # Safe UART TX pin (alternative to USB serial)
  rx_pin_uart: GPIO18  # Safe UART RX pin (alternative to USB serial)

  # LED/Light GPIO - ESP32-S3 Super Mini WS2812 RGB LED
  # Most ESP32-S3 Super Mini boards have WS2812 RGB LED on GPIO48
  light_gpio: GPIO48   # WS2812 RGB LED (standard location for most variants)
  
  # ADC pin - ESP32-S3 Super Mini ADC pins
  # Using ADC1 pins (ADC1: GPIO1-GPIO10) - safer than ADC2 when WiFi is active
  mic_adc: GPIO1       # ADC1 capable pin (safe for WiFi use)
  
  # Motion sensor GPIO - General purpose digital input
  motion_gpio: GPIO4   # Safe GPIO pin for digital input with pullup support
  
  # I2C pins - ESP32-S3 Super Mini I2C configuration
  # Any GPIO can be used for I2C on ESP32-S3
  sda_pin_i2c: GPIO6   # I2C SDA pin (safe choice)
  scl_pin_i2c: GPIO7   # I2C SCL pin (safe choice)
  
  # Additional safe GPIO pins available on ESP32-S3 Super Mini:
  # GPIO1-GPIO21 (most available, check specific board layout)
  # GPIO33-GPIO48 (GPIO48 often used for RGB LED)
  
  # ADC-capable input pins:
  # ADC1: GPIO1-GPIO10
  # ADC2: GPIO11-GPIO20 (avoid when using WiFi)
  
  # Pins to avoid or use with caution:
  # GPIO0 - Boot/Programming (has pull-up, used for boot mode selection)
  # GPIO3 - Boot strapping pin (affects boot mode)
  # GPIO43, GPIO44 - UART0 (USB serial/programming) - conflicts with USB debugging
  # GPIO19, GPIO20 - USB D+/D- pins (native USB CDC)
  # GPIO26-GPIO32 - Reserved for flash/PSRAM on some board variants
  
  # Alternative UART configurations:
  # For debugging via USB serial (conflicts with this UART config):
  # tx_pin_uart: GPIO43  # UART0 TX (USB serial - debugging only)
  # rx_pin_uart: GPIO44  # UART0 RX (USB serial - debugging only)
  
  # Alternative I2C pins (any GPIO can be I2C):
  # sda_pin_i2c: GPIO4   # Alternative SDA
  # scl_pin_i2c: GPIO5   # Alternative SCL
  
  # If your board has simple LED instead of RGB:
  # light_gpio: GPIO21   # Alternative LED pin
  
  # SPI pins (if needed):
  # mosi_pin: GPIO11  # MOSI
  # miso_pin: GPIO13  # MISO
  # sck_pin: GPIO12   # SCK
  # cs_pin: GPIO10    # SS/CS
  
  # Native USB pins (CDC serial):
  # USB_D_PLUS: GPIO20
  # USB_D_MINUS: GPIO19

####################################
# End Substitutions
####################################

esphome:
  platformio_options:
    build_flags: -DBOARD_HAS_PSRAM  # Enable PSRAM support
    board_build.flash_mode: qio
    board_build.f_flash: 80000000L
  on_boot:
    priority: 600
    then:
      - delay: 500ms  # Boot delay for sensor stabilization

esp32:
  # ESP32-S3 Super Mini board configuration
  # Using esp32-s3-devkitc-1 profile for maximum compatibility
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 4MB  # Common size - verify your board variant (some have 8MB/16MB)
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      # Performance optimizations
      CONFIG_COMPILER_OPTIMIZATION_PERF: y
      CONFIG_COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y  # Match flash_size above - change both if different
      
      # PSRAM configuration - most ESP32-S3 Super Mini boards include PSRAM
      CONFIG_SPIRAM: y                    # Enable PSRAM support
      CONFIG_SPIRAM_MODE_OCT: y          # Octal SPI mode for better performance
      CONFIG_SPIRAM_SPEED_80M: y         # 80MHz PSRAM speed
      CONFIG_SPIRAM_TYPE_AUTO: y         # Auto-detect PSRAM type
      
      # BLE support
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
      
      # Extend the watchdog timeout
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"
      
      # Native USB CDC configuration - ESP32-S3 Super Mini supports USB CDC
      CONFIG_ESP_CONSOLE_USB_CDC: y                    # Enable USB CDC console
      CONFIG_ESP_CONSOLE_USB_CDC_SUPPORT_ETS_PRINTF: y # Early boot messages via USB
      
      # WiFi compatibility and stability options
      CONFIG_ESP32_WIFI_ENABLE_WPA3_SAE: n        # Disable WPA3 SAE for compatibility
      CONFIG_ESP32_WIFI_ENABLE_WPA3_OWE_STA: n    # Disable WPA3 OWE for compatibility
      CONFIG_ESP32_WIFI_SOFTAP_SAE_SUPPORT: n     # Disable SAE in AP mode
      
      # Disable WiFi power management features that can cause connection issues
      CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED: n       # Disable TX aggregation
      CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED: n       # Disable RX aggregation

# PSRAM configuration - ESP32-S3 Super Mini PSRAM settings
# Most ESP32-S3 Super Mini variants include 2MB or 8MB PSRAM
psram:
  mode: octal     # Octal SPI mode for optimal performance
  speed: 80MHz    # Standard speed for stability

# UART bus configuration - for external device communication
# Note: This conflicts with USB serial debugging if using GPIO43/44
uart:
  id: uart_bus
  tx_pin: ${tx_pin_uart}  # See substitutions for pin assignments
  rx_pin: ${rx_pin_uart}  # See substitutions for pin assignments
  baud_rate: 256000       # High-speed UART communication
  parity: NONE
  stop_bits: 1
  data_bits: 8            # Standard 8-bit data

# I2C configuration (optional - add if using I2C sensors)
# i2c:
#   sda: ${sda_pin_i2c}
#   scl: ${scl_pin_i2c}
#   scan: true
#   frequency: 400kHz

# ADC sensor example (if using analog sensor)
# sensor:
#   - platform: adc
#     pin: ${mic_adc}
#     name: "Analog Input"
#     update_interval: 60s
#     attenuation: auto

# GPIO binary sensor example (motion sensor)
# binary_sensor:
#   - platform: gpio
#     pin: 
#       number: ${motion_gpio}
#       mode:
#         input: true
#         pullup: true
#     name: "Motion Sensor"
#     device_class: motion

# Light configuration - ESP32-S3 Super Mini typically has WS2812 RGB LED
# Option 1: For boards with WS2812 RGB LED (most common)
# light:
#   - platform: esp32_rmt_led_strip
#     rgb_order: GRB
#     pin: ${light_gpio}
#     num_leds: 1
#     chipset: ws2812
#     # rmt_channel parameter removed for ESP-IDF v5.x compatibility (auto-allocated)
#     id: status_light
#     name: "Status Light"
#     internal: true
#     restore_mode: ALWAYS_OFF
#     effects:
#       - addressable_rainbow:
#       - addressable_color_wipe:
#       - addressable_scan:
#       - addressable_flicker:

# Option 1.1: For boards with WS2812 RGB LED (most common) - make the light configurable in Home Assistant
# WS2812 RGB LED configuration - ESP32-S3 Super Mini onboard RGB LED
light:
  - platform: esp32_rmt_led_strip  # Preferred platform for ESP-IDF v5.x
    rgb_order: GRB                 # WS2812 color order (Green-Red-Blue)
    pin: ${light_gpio}             # GPIO48 on most ESP32-S3 Super Mini boards
    num_leds: 1                    # Single onboard RGB LED
    chipset: ws2812                # WS2812B LED chipset
    id: status_light
    name: "Status Light"
    restore_mode: ALWAYS_OFF       # Start with LED off after reboot
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: "Color Wipe"
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
      - addressable_scan:
          name: "Scanner"
          move_interval: 100ms
          scan_width: 1
      - addressable_flicker:
          name: "Flicker"
          intensity: 1.5%
      - pulse:
          name: "Pulse"
          transition_length: 1s
          update_interval: 1s
      - strobe:
          name: "Strobe"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 500ms
            - state: false
              duration: 250ms
      - random:
          name: "Random"
          transition_length: 5s
          update_interval: 7s

# Option 2: For boards with simple LED (uncomment if your board has simple LED)
# light:
#   - platform: binary
#     name: "Blue Status Light"
#     output: light_output
#     id: status_light
#     #restore_mode: ALWAYS_ON
#     restore_mode: RESTORE_DEFAULT_ON
#     #restore_mode: ALWAYS_OFF
 
# output:
#   - platform: gpio
#     pin: ${light_gpio}
#     id: light_output

# Add select entity for easy effect switching
select:
  - platform: template
    name: "LED Effect"
    id: led_effect_select
    options:
      - "None"
      - "Rainbow"
      - "Color Wipe"
      - "Scanner"
      - "Flicker"
      - "Pulse"
      - "Strobe"
      - "Random"
    initial_option: "None"
    set_action:
      - if:
          condition:
            lambda: 'return x == "None";'
          then:
            - light.turn_on:
                id: status_light
                effect: "None"
      - if:
          condition:
            lambda: 'return x == "Rainbow";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Rainbow"
      - if:
          condition:
            lambda: 'return x == "Color Wipe";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Color Wipe"
      - if:
          condition:
            lambda: 'return x == "Scanner";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Scanner"
      - if:
          condition:
            lambda: 'return x == "Pulse";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Pulse"
      - if:
          condition:
            lambda: 'return x == "Strobe";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Strobe"
      - if:
          condition:
            lambda: 'return x == "Random";'
          then:
            - light.turn_on:
                id: status_light
                effect: "Random"


