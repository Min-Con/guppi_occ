# Built-in display configuration
spi:
  clk_pin: ${clk_pin}
  mosi_pin: ${mosi_pin}

display:
  - platform: st7789v
    model: TTGO_TDISPLAY_135x240
    cs_pin: ${cs_pin}
    dc_pin: ${dc_pin}
    reset_pin: ${reset_pin}
    rotation: 270
    id: stick_display
    update_interval: 1s
    lambda: |-
      // Header with device name and WiFi status
      it.print(0, 0, id(font_small), "BLE Tracker");
      it.printf(135, 0, id(font_small), TextAlign::TOP_RIGHT, "WiFi: %s", 
                id(wifi_signal_db).state > -50 ? "Strong" : 
                id(wifi_signal_db).state > -70 ? "Good" : "Weak");
      
      // Current time
      it.strftime(67, 12, id(font_small), TextAlign::TOP_CENTER, 
                  "%H:%M:%S", id(homeassistant_time).now());
      
      // Horizontal line
      it.line(0, 25, 135, 25);
      
      // BLE Statistics
      it.printf(0, 30, id(font_medium), "Devices: %d", (int)id(ble_device_count).state);
      it.printf(0, 50, id(font_medium), "Active: %d", (int)id(ble_active_count).state);
      
      // Memory usage
      it.printf(0, 70, id(font_small), "RAM: %.1f%%", id(memory_usage).state);
      
      // Uptime
      int total_seconds = (int)id(uptime_sensor).state;
      int uptime_hours = total_seconds / 3600;
      int uptime_minutes = (total_seconds % 3600) / 60;
      it.printf(0, 85, id(font_small), "Up: %dh %dm", uptime_hours, uptime_minutes);
      
      // Show strongest BLE signal
      it.printf(0, 100, id(font_small), "Strongest: %.0fdBm", id(strongest_rssi).state);
      
      // Status indicators
      if (id(api_connected).state) {
        it.filled_circle(125, 110, 3, COLOR_ON);
        it.printf(110, 115, id(font_tiny), "HA");
      }
      
      // Last device seen
      it.printf(0, 220, id(font_tiny), "Last: %s", id(last_device_name).state.c_str());

# # Fonts for display
# font:
#   - file: "gfonts://Roboto"
#     id: font_tiny
#     size: 8
#   - file: "gfonts://Roboto"
#     id: font_small
#     size: 10
#   - file: "gfonts://Roboto"
#     id: font_medium
#     size: 12
#   - file: "gfonts://Roboto"
#     id: font_large
#     size: 16

# Fonts for display (reduced to save memory)
font:
  - file: "gfonts://Roboto"
    id: font_small
    size: 10
    glyphs: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz :.-_%/"
  - file: "gfonts://Roboto"
    id: font_medium
    size: 12
    glyphs: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz :.-_%/"

# Time component
time:
  - platform: homeassistant
    id: homeassistant_time

# BLE configuration for tracking and proxy
esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1000ms
    active: true
  on_ble_advertise:
    - lambda: |-
        // Count and track devices
        static std::set<std::string> seen_devices;
        static std::map<std::string, float> device_rssi;
        
        std::string device_mac = x.address_str();
        seen_devices.insert(device_mac);
        device_rssi[device_mac] = x.get_rssi();
        
        // Update device count
        id(ble_device_count).publish_state(seen_devices.size());
        
        // Find strongest signal
        float strongest = -100;
        for (auto& pair : device_rssi) {
          if (pair.second > strongest) strongest = pair.second;
        }
        id(strongest_rssi).publish_state(strongest);
        
        // Track last device name if available
        if (!x.get_name().empty()) {
          id(last_device_name).publish_state(x.get_name());
        }

# BLE Proxy for Home Assistant
bluetooth_proxy:
  active: true

# Sensors for display data
sensor:
  # # WiFi signal strength
  # - platform: wifi_signal
  #   name: "WiFi Signal"
  #   id: wifi_signal
  #   update_interval: 30s
  #   internal: true

  # # Device uptime
  # - platform: uptime
  #   name: "Uptime"
  #   id: device_uptime
  #   internal: true

  # Memory usage
  - platform: template
    name: "Memory Usage"
    id: memory_usage
    lambda: |-
      return (heap_caps_get_total_size(MALLOC_CAP_INTERNAL) - 
              heap_caps_get_free_size(MALLOC_CAP_INTERNAL)) * 100.0 / 
              heap_caps_get_total_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "%"
    update_interval: 10s
    internal: true

  # BLE device counters
  - platform: template
    name: "BLE Device Count"
    id: ble_device_count
    internal: true

  - platform: template
    name: "BLE Active Count"
    id: ble_active_count
    internal: true

  - platform: template
    name: "Strongest RSSI"
    id: strongest_rssi
    unit_of_measurement: "dBm"
    internal: true

# Text sensors for device tracking
text_sensor:
  - platform: template
    name: "Last Device Name"
    id: last_device_name
    internal: true

# Binary sensors
binary_sensor:
  # API connection status
  - platform: status
    name: "API Connected"
    id: api_connected
    internal: true

  # Built-in button (optional for manual actions)
  - platform: gpio
    pin:
      number: ${button_gpio}
      inverted: true
    name: "Button A"
    on_press:
      - display.page.show_next: stick_display

# Status LED (optional)
light:
  - platform: monochromatic
    output: stat_led
    name: "Status LED"
    id: led

output:
  - platform: ledc
    pin: ${light_gpio}
    id: stat_led