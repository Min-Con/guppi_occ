# User-configurable offset controls
number:
  - platform: template
    name: "Temperature Offset"
    id: temp_offset
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    initial_value: 0.0
    restore_value: true
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-plus"
    entity_category: config
    optimistic: true

  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    min_value: -20.0
    max_value: 20.0
    step: 0.1
    initial_value: 0.0
    restore_value: true
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    entity_category: config
    optimistic: true

  - platform: template
    name: "Pressure Offset"
    id: pressure_offset
    min_value: -50.0
    max_value: 50.0
    step: 0.1
    initial_value: 0.0
    restore_value: true
    unit_of_measurement: "hPa"
    icon: "mdi:gauge"
    entity_category: config
    optimistic: true

# BME280 sensor configuration with user-configurable offsets
sensor:
  - platform: bme280_i2c
    id: bme_sensor
    temperature:
      name: "Temperature"
      id: bme_temperature
      oversampling: 16x
      filters:
        - lambda: "return x + id(temp_offset).state;"
    pressure:
      name: "Pressure"
      id: bme_pressure
      oversampling: 16x
      filters:
        - lambda: "return x + id(pressure_offset).state;"
    humidity:
      name: "Humidity"
      id: bme_humidity
      oversampling: 16x
      filters:
        - lambda: "return x + id(humidity_offset).state;"
    address: 0x77  # Use 0x76 if SDO is connected to GND
    update_interval: 60s
    iir_filter: 4x  # IIR filter for stable readings

  # Calculated sensors (these will automatically use the offset-adjusted values)
  - platform: template
    name: "Dew Point"
    device_class: temperature
    unit_of_measurement: "°C"
    icon: "mdi:water-thermometer"
    lambda: |-
      float temp = id(bme_temperature).state;
      float hum = id(bme_humidity).state;
      
      // Magnus formula for dew point calculation
      float a = 17.27;
      float b = 237.7;
      float alpha = ((a * temp) / (b + temp)) + log(hum / 100.0);
      float dew_point = (b * alpha) / (a - alpha);
      
      return dew_point;
    update_interval: 60s

  - platform: template
    name: "Heat Index"
    device_class: temperature
    unit_of_measurement: "°C"
    icon: "mdi:sun-thermometer"
    lambda: |-
      float temp = id(bme_temperature).state;
      float hum = id(bme_humidity).state;
      float temp_f = temp * 9.0/5.0 + 32.0;  // Convert to Fahrenheit
      
      if (temp_f < 80.0 || hum < 40.0) {
        return temp;  // Heat index not applicable
      }
      
      // Simplified heat index calculation
      float hi = -42.379 + 2.04901523 * temp_f + 10.14333127 * hum
                - 0.22475541 * temp_f * hum - 0.00683783 * temp_f * temp_f
                - 0.05481717 * hum * hum + 0.00122874 * temp_f * temp_f * hum
                + 0.00085282 * temp_f * hum * hum - 0.00000199 * temp_f * temp_f * hum * hum;
      
      // Convert back to Celsius
      return (hi - 32.0) * 5.0/9.0;
    update_interval: 60s

  - platform: template
    name: "Absolute Humidity"
    unit_of_measurement: "g/m³"
    icon: "mdi:water-percent"
    lambda: |-
      float temp = id(bme_temperature).state;
      float hum = id(bme_humidity).state;
      
      // Calculate absolute humidity in g/m³
      float abs_hum = (6.112 * exp((17.67 * temp) / (temp + 243.5)) * hum * 2.1674) / (273.15 + temp);
      return abs_hum;
    update_interval: 60s

  - platform: template
    name: "Altitude"
    unit_of_measurement: "m"
    icon: "mdi:elevation-rise"
    lambda: |-
      const float sea_level_pressure = 1013.25;  // hPa
      float pressure = id(bme_pressure).state;
      float temp = id(bme_temperature).state + 273.15;  // Kelvin
      
      // Barometric formula
      float altitude = ((pow((sea_level_pressure / pressure), (1.0 / 5.257)) - 1.0) * temp) / 0.0065;
      return altitude;
    update_interval: 60s

  - platform: template
    name: "Daily Min Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-chevron-down"
    lambda: |-
      float current = id(bme_temperature).state;
      if (current < id(daily_min_temp)) {
        id(daily_min_temp) = current;
      }
      return id(daily_min_temp);
    update_interval: 60s

  - platform: template
    name: "Daily Max Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-chevron-up"
    lambda: |-
      float current = id(bme_temperature).state;
      if (current > id(daily_max_temp)) {
        id(daily_max_temp) = current;
      }
      return id(daily_max_temp);
    update_interval: 60s

# Text sensors
text_sensor:
  # Comfort level
  - platform: template
    name: "Comfort Level"
    icon: "mdi:home-thermometer-outline"
    lambda: |-
      float temp = id(bme_temperature).state;
      float hum = id(bme_humidity).state;
      
      if (temp >= 20 && temp <= 26 && hum >= 40 && hum <= 60) {
        return {"Comfortable"};
      } else if ((temp >= 18 && temp < 20) || (temp > 26 && temp <= 28)) {
        if (hum >= 30 && hum <= 70) {
          return {"Acceptable"};
        }
      }
      
      if (temp < 18) {
        return {"Too Cold"};
      } else if (temp > 28) {
        return {"Too Hot"};
      } else if (hum < 30) {
        return {"Too Dry"};
      } else if (hum > 70) {
        return {"Too Humid"};
      } else {
        return {"Uncomfortable"};
      }
    update_interval: 60s

  # Weather tendency based on pressure changes
  - platform: template
    name: "Weather Tendency"
    icon: "mdi:weather-partly-cloudy"
    lambda: |-
      static float last_pressure = 0;
      static float pressure_change = 0;
      float current_pressure = id(bme_pressure).state;
      
      if (last_pressure > 0) {
        pressure_change = current_pressure - last_pressure;
      }
      last_pressure = current_pressure;
      
      if (pressure_change > 1.5) {
        return {"Improving"};
      } else if (pressure_change < -1.5) {
        return {"Deteriorating"};
      } else {
        return {"Stable"};
      }
    update_interval: 30min

  # Pressure trend
  - platform: template
    name: "Pressure Level"
    icon: "mdi:gauge"
    lambda: |-
      float pressure = id(bme_pressure).state;
      
      if (pressure < 1009) {
        return {"Low"};
      } else if (pressure >= 1009 && pressure <= 1022) {
        return {"Normal"};
      } else {
        return {"High"};
      }
    update_interval: 60s

# Binary sensors
binary_sensor:
  # Frost warning (fixed to use dew point calculation)
  - platform: template
    name: "Frost Warning"
    device_class: cold
    lambda: |-
      float temp = id(bme_temperature).state;
      float hum = id(bme_humidity).state;
      
      // Calculate dew point for frost warning
      float a = 17.27;
      float b = 237.7;
      float alpha = ((a * temp) / (b + temp)) + log(hum / 100.0);
      float dew_point = (b * alpha) / (a - alpha);
      
      return (temp <= 4.0 || dew_point <= 2.0);

# Interval for periodic logging
interval:
  - interval: 10min
    then:
      - logger.log:
          format: "Temp: %.1f°C (offset: %.1f), Humidity: %.1f%% (offset: %.1f), Pressure: %.1f hPa (offset: %.1f)"
          args: 
            - 'id(bme_temperature).state'
            - 'id(temp_offset).state'
            - 'id(bme_humidity).state'
            - 'id(humidity_offset).state'
            - 'id(bme_pressure).state'
            - 'id(pressure_offset).state'

# Optional: Daily min/max tracking
globals:
  - id: daily_min_temp
    type: float
    restore_value: no
    initial_value: '100.0'
  - id: daily_max_temp
    type: float
    restore_value: no
    initial_value: '-100.0'

# Reset daily min/max at midnight
time:
  - platform: homeassistant
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - globals.set:
              id: daily_min_temp
              value: '100.0'
          - globals.set:
              id: daily_max_temp
              value: '-100.0'