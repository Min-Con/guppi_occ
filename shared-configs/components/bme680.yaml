# User configurable offsets and radar configuration parameters
number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset
    optimistic: true
    min_value: -30
    max_value: 30
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"

  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    optimistic: true
    min_value: -30
    max_value: 30
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"

# BME680 configuration using BSEC2
# Ensure that the sensor is properly wired and powered (3.3V)
bme68x_bsec2_i2c:
  id: bme68x_sensor
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  address: 0x77  # Verify this address with your hardware (common alternatives: 0x76)
  state_save_interval: 24h

sensor:
  # BME680 Sensors using BSEC2 (raw sensor readings)
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    temperature:
      name: "Uncompensated Temperature"
      id: raw_temperature
      internal: true
    pressure:
      name: "Pressure"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    humidity:
      name: "Uncompensated Humidity"
      id: raw_humidity
      internal: true
    gas_resistance:
      name: "Gas Resistance"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    aqi:
      name: "AQI"
      id: aqi
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    co2_equivalent:
      name: "CO2 Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3

  # Compensated temperature sensor
  - platform: template
    name: "Temperature"
    id: compensated_temperature
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    icon: "mdi:thermometer"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_temperature).state + id(temperature_offset).state;
    update_interval: 60s

  # Compensated humidity sensor
  - platform: template
    name: "Humidity"
    id: compensated_humidity
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    icon: "mdi:water-percent"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_humidity).state + id(humidity_offset).state;
    update_interval: 60s

text_sensor:
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    aqi_accuracy:
      name: "AQI Accuracy"

  - platform: template
    name: "AQI Classification"
    lambda: |-
      if (int(id(aqi).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(aqi).state) >= 51 && int(id(aqi).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(aqi).state) >= 101 && int(id(aqi).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(aqi).state) >= 151 && int(id(aqi).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(aqi).state) >= 201 && int(id(aqi).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(aqi).state) >= 251 && int(id(aqi).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(aqi).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

