i2c:
  sda: ${sda_pin_i2c}
  scl: ${scl_pin_i2c}
  # scan: true
  scan: false
  frequency: 400khz

# Alternative compensation method for BH1750 sensor
number:
  - platform: template
    name: "Actual Light Level (Real Lux)"
    id: real_lux_setting
    icon: "mdi:brightness-6"
    unit_of_measurement: "lux"
    optimistic: true
    initial_value: 35.0
    min_value: 0
    max_value: 1000
    step: 0.1
    restore_value: true
    
sensor:
  # BH1750 Ambient Light Sensor
  - platform: bh1750
    name: "Raw Light Level"
    id: raw_light_level
    internal: true
    address: 0x23
    update_interval: 60s

  # Compensated light level sensor
  - platform: template
    name: "Light Level"
    id: compensated_light_level
    unit_of_measurement: "lx"
    device_class: illuminance
    state_class: measurement
    icon: "mdi:brightness-6"
    accuracy_decimals: 1
    lambda: |-
      // Get the raw reading from the BH1750 sensor
      float raw = id(raw_light_level).state;
      
      // Reference values (your calibration point)
      float raw_reference = 5.0;  // Your sensor reads 5 lux
      float true_reference = id(real_lux_setting).state;  // Actual value is 35 lux
      
      // Calculate the calibration factor
      float calibration_factor = true_reference / raw_reference;
      
      // For very low readings (below 0.5 lux), use minimal adjustment
      if (raw < 0.5) {
        return raw;
      }
      
      // Apply a non-linear calibration that maintains proper scaling
      // as light levels change - this approaches the full calibration
      // factor as light increases but preserves near-zero readings
      float result = raw * (calibration_factor * (1.0 - exp(-raw / 3.0)) + 1.0);
      
      return result;
    update_interval: 60s


